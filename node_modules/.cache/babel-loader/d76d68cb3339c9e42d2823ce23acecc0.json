{"ast":null,"code":"var _jsxFileName = \"/Users/mitishah/Documents/rickandmorty/src/Components/Filters/Category/Status.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Status = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"accordion-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"accordion-header\",\n      id: \"headingThree\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"accordion-button collapsed\",\n        type: \"button\",\n        \"data-bs-toggle\": \"collapse\",\n        \"data-bs-target\": \"#collapseThree\",\n        \"aria-expanded\": \"false\",\n        \"aria-controls\": \"collapseThree\",\n        children: \"Accordion Item #3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"collapseThree\",\n      className: \"accordion-collapse collapse\",\n      \"aria-labelledby\": \"headingThree\",\n      \"data-bs-parent\": \"#accordionExample\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accordion-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"This is the third item's accordion body.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), \" It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \".accordion-body\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 29\n        }, this), \", though the transition does limit overflow.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Status;\nexport default Status;\n\nvar _c;\n\n$RefreshReg$(_c, \"Status\");","map":{"version":3,"names":["React","Status"],"sources":["/Users/mitishah/Documents/rickandmorty/src/Components/Filters/Category/Status.js"],"sourcesContent":["import React from \"react\";\n\nconst Status = () => {\n  return (\n    <div className=\"accordion-item\">\n      <h2 className=\"accordion-header\" id=\"headingThree\">\n        <button\n          className=\"accordion-button collapsed\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#collapseThree\"\n          aria-expanded=\"false\"\n          aria-controls=\"collapseThree\"\n        >\n          Accordion Item #3\n        </button>\n      </h2>\n      <div\n        id=\"collapseThree\"\n        className=\"accordion-collapse collapse\"\n        aria-labelledby=\"headingThree\"\n        data-bs-parent=\"#accordionExample\"\n      >\n        <div className=\"accordion-body\">\n          <strong>This is the third item's accordion body.</strong> It is hidden\n          by default, until the collapse plugin adds the appropriate classNamees\n          that we use to style each element. These classNamees control the\n          overall appearance, as well as the showing and hiding via CSS\n          transitions. You can modify any of this with custom CSS or overriding\n          our default variables. It's also worth noting that just about any HTML\n          can go within the <code>.accordion-body</code>, though the transition\n          does limit overflow.\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Status;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,MAAM,GAAG,MAAM;EACnB,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAA,wBACE;MAAI,SAAS,EAAC,kBAAd;MAAiC,EAAE,EAAC,cAApC;MAAA,uBACE;QACE,SAAS,EAAC,4BADZ;QAEE,IAAI,EAAC,QAFP;QAGE,kBAAe,UAHjB;QAIE,kBAAe,gBAJjB;QAKE,iBAAc,OALhB;QAME,iBAAc,eANhB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAaE;MACE,EAAE,EAAC,eADL;MAEE,SAAS,EAAC,6BAFZ;MAGE,mBAAgB,cAHlB;MAIE,kBAAe,mBAJjB;MAAA,uBAME;QAAK,SAAS,EAAC,gBAAf;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,sYAOoB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAPpB;MAAA;QAAA;QAAA;QAAA;MAAA;IANF;MAAA;MAAA;MAAA;IAAA,QAbF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiCD,CAlCD;;KAAMA,M;AAoCN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}